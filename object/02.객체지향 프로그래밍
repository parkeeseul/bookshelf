# 2. 객체지향 프로그래밍

### 2. 객체지향 프로그래밍을 향해

#### 협력, 객체, 클래스

객체지향 패러다임으로의 전환을 위해 집중해야 할 것

1. 어떤 클래스가 필요한지를 고민하기 전에 어떤 객체들이 필요한지 고민하라.

* 클래스는 공통적인 상태와 행동을 공유하는 객체들을 추상화한 것이다. 따라서 클래스의 윤곽을 잡기 위해서는 어떤 객체들이 어떤 상태와 행동을 가지는지를 먼저 결정해야 한다. 객체를 중심에 두는 접근 방법은 설계를 단순하고 깔끔하게 만든다.

2. 객체를 독립적인 존재가 아니라 기능을 구현하기 위해 협력하는 공동체의 일원으로 봐야 한다.

* 객체는 다른 객체에게 도움을 주거나 의존하면서 살아가는 협력적인 존재다. 객체를 협력하는 공동체의 일원으로 바라보는 것은 설계를 유연하고 확장 가능하게 만든다. 객체들의 모양과 윤곽이 잡히면 공통된 특성과 상태를 가진 객체들을 타입으로 분류하고 이 타입을 기반으로 클래스를 구현하라.

#### 도메인의 구조를 따르는 프로그램 구조

- **도메인** : 문제를 해결하기 위해 사용자가 프로그램을 사용하는 분야
- 객체지향 패러다임이 강력한 이유는 요구사항을 분석하는 초기 단계부터 프로그램을 구현하는 마지막 단계까지 객체라는 동일한  추상화 기법을 사용할 수 있기 때문이다. 요구사항과 프로그램을 객체라는 동일한 관점에서 바라볼 수 있기 때문에 도메인을 구성하는 개념들이 프로그램의 객체와 클래스로 매끄럽게 연결될 수 있다.

#### 클래스 구현하기

클래스는 내부와 외부로 구분되며 훌륭한 클래스를 설계하기 위한 핵심은 어떤 부분을 외부에 공개하고 어떤 부분을 감출지를 결정하는 것이다.

클래스의 내부와 외부를 구분해야 하는 이유? : 경계의 명확성이 **객체의 자율성** 을 보장하기 때문이다. 그리고 더 중요한 이유로 **프로그래머에게 구현의 자유**를 제공하기 때문이다.

* 자율적인 객체
  * 객체는 **상태**와 **행동**을 함께 가지는 복잡적인 존재다.
  * 객체는 스스로 판단하고 행동하는 **자율적인 존재**다.
  * 데이터와 기능을 객체 내부로 함께 묶는 것을 **캡슐화**라고 부른다.
  * 대부분의 객체지향 프로그래밍 언어들은 상태와 행동을 캡슐화하는 것에서 나아가 외부에서의 접근을 통제할 수 있는 **접근 제어(access control)** 메커니즘도 함께 제공한다.
  * 객체 내부에 대한 접근을 통제하는 이유는 객체를 자율적인 존재로 만들기 위해서다. 객체지향의 핵심은 스스로 상태를 관리하고, 판단하고, 행동하는 자율적인 객체들의 공동체를 구성하는 것이다. 객체가 자율적인 존재로 우뚝 서기 위해서는 외부의 간섭을 최소화해야 한다. 외부에서는 객체가 어떤 상태에 놓여 있는지, 어떤 생각을 하고 있는지 알아서는 안 되며, 결정에 직접적으로 개입하려고 해서도 안 된다. 객체에게 원하는 것을 요청하고 객체가 스스로 최선의 방법을 결정할 수 있을 것이라는 점을 믿고 기다려야 한다.
  * **인터페이스(public interface)**: 외부에서 접근 가능한 부분
  * **구현(implementaion)**: 외부에서는 접근 불가. 오직 내부에서만 접근 가능한 부분
  * 일반적으로 객체의 상태는 숨기고 행동만 외부에 공개해야 한다.

* 프로그래머의 자유
  * 클래스 작성자는 클라이언트 프로그래머에게 필요한 부분만 공개하고 나머지는 꽁꽁 숨겨야 한다. 클라이언트 프로그래머가 숨겨 놓은 부분에 마음대로 접근할 수 없도록 방지함으로써 클라이언트 프로그래머에 대한 영향을 걱정하지 않고도 내부 구현을 마음대로 변경할 수 있다. 이를 **구현은닉(implementation hiding)** 이라고 부른다.
  * **구현은닉**을 통해 클라이언트 프로그래머는 내부의 구현은 무시한 채 인터페이스만 알고 있어도 클래스를 사용할 수 있기 때문에 머릿속에 담아둬야 하는 지식의 양을 줄일 수 있고, 클래스 작성자는 인터페이스를 바꾸지 않는 한 외부에 미치는 영향을 걱정하지 않고도 내부 구현을 마음대로 변경할 수 있다.
  * 설계가 필요한 이유는 변경을 관리하기 위해서이다. 객체의 변경을 관리할 수 있는 기법 중에서 가장 대표적인 것이 바로 접근 제어이다.

#### 협력하는 객체들의 공동체

* 객체지향의 장점은 객체를 이용해 도메인의 의미를 풍부하게 표현할 수 있다는 것이다. 따라서 의미를 좀 더 명시적이고 분명하게 표현할 수 있다면 객체를 사용해서 해당 개념을 구현하라. 그 개념이 비록 하나의 인스턴스 변수만 포함하더라도 개념을 명시적으로 표현하는 것은 전체적인 설계의 명확성과 유연성을 높이는 첫걸음이다.
* 시스템의 어떤 기능을 구현하기 위해 객체들 사이에 이뤄지는 상호작용을 **협력(Collaboration)** 이라고 부른다.

#### 협력에 관한 짧은 이야기

* 객체가 다른 객체와 상호작용할 수 있는 유일한 방법은 **메세지를 전송(send a message)**하는 것뿐이다.다른 객체에게 요청이 도착할 떄 해당 객체가 **메시지를 수신(receive a message)** 했다고 이야기한다. 메시지를 수신한 객체는 스스로의 결정에 따라 자율적으로 메시지를 처리할 방법을 결정한다. 이 처럼 수신된 메시지를 처리하기 위한 자신만의 방법을 **메서드(method)**라고 부른다.

### 3. 할인 요금 구하기

#### 할인 요금 게산을 위한 협력 시작

#### 할인 정책과 할인 조건

#### 할인 정책 구성하기

### 4. 상속과 다형성

#### 컴파일 시간 의존성과 실행 시간 의존성

* **코드의 의존성**과 **실행 시점의 의존성**은 서로 다를 수 있다 => 클래스 사이의 의존성과 객체 사이의 의존성은 동일하지 않을 수 있다.
* 유연하고, 쉽게 재사용할 수 있으며, 확장 가능한 객체지향 설계가 가지는 특징은 코드의 의존성과 실행 시점의 의존성이 다르다는 것이다.
* 코드의 의존성과 실행 시점의 의존성이 다르면 다를수록 코드를 이해하기 어려워진다.(코드를 이해하기 위해서는 코드뿐만 아니라 객체를 생성하고 연결하는 부분을 찾아야 하기 때문)
* 코드의 의존성과 실행 시점의 의존성이 다르면 다를수록 코드는 더 유연해지고 확장 가능해진다.
* 설계가 유연해질수록 코드를 이해하고 디버깅하기는 점점 더 여려워진다. 반면 유연성을 억제하면 코드를 이해하고 디버깅하기는 쉬워지지만 재사용성과 확장 가능성은 낮아진다. 무조건 유연한 설계도, 무조건 읽기 쉬운 코드도 정답이 아니다. 이것이 객체지향 설계가 어려우면서도 매력적인 이유다. (트레이드 오프)

#### 차이에 의한 프로그래밍

* **상속**은 객체지향에서 코드를 재사용하기 위해 가장 널리 사용되는 방법
* 상속을 이용하면 클래스 사이에 관계를 설정하는 것만으로 기존 클래스가 가지고 있는 모든 속성과 행동을 새로운 클래스에 포함시킬 수 있다.
* 상속은 기존 클래스를 기반으로 새로운 클래스를 쉽고 빠르게 추가할 수 있는 간편한 방법을 제공한다. 또한 상속을 이용하면 부모 클래스의 구현은 공유하면서도 행동이 다른 자식 클래스를 쉽게 추가할 수 있다.
* 이처럼 부모 클래스와 다른 부분만을 추가해서 새로운 클래스를 쉽고 빠르게 만드는 방법을 **차이에 의한 프로그래밍**  이라고 부른다.

#### 상속과 인터페이스

* 상속이 가치 있는 이유는 부모 클래스가 제공하는 모든 인터페이스를 자식 클래스가 물려받을 수 있기 때문이다. (재사용의 목적X)
* 상속을 통해 자식 클래스는 자신의 인터페이스에 부모 클래스의 인터페이스를 포함하게 된다. 결과적으로 자식 클래스는 부모 클래스가 수신할 수 있는 모든 메세지를 수신할 수 있기 때문에 외부 객체는 자식 클래스를 부모 클래스와 동일한 타입으로 간주할 수 있다. => 자식 클래스는 부모 클래스 대신 사용될 수 있다.
*  컴파일러는 코드 상에서 부모 클래스가 나오는 모든 장소에 자식 클래스를 사용하는 것을 허용한다.
* 자식 클래스가 부모 클래스를 대신하는 것을 **업캐스팅(upcasting)** 이라고 부른다. 업캐스팅이라고 부르는 이유는 일반적으로 클래스 다이어그램을 작성할 때 부모 클래스를 자식 클래스 위에 위치시키기 때문이다. 아래에 위치한 자식 클래스가 위에 위치한 부모 클래스를 자식 클래스로 타입 캐스팅되는 것처럼 보이기 때문에 업캐스팅이라는 용어를 사용한다.

#### 다형성

* **메시지**와 **메서드**는 다른 개념이다.
* **메세지**를 전송하지만 실행 시점에 실제로 실행되는 **메서드**는 협력하는 객체의 실제 클래스가 무엇인지에 따라 달라진다.
* 다형성은 **컴파일 시간 의존성**과 **실행 시간 의존성**을 다르게 만들 수 있는 객체지향의 특성을 이용해 서로 다른 메서드를 실행할 수 있게 한다.
* 다형성이란 동일한 메세지를 수신했을 때 객체의 타입에 따라 다르게 응답할 수 있는 능력을 의미한다. 따라서 다형적인 협력에 참여하는 객체들은 모두 같은 메세지를 이해할 수 있어야 한다. => 인터페이스가 동일해야 한다.
* **지연 바인딩(lazy binding), 동적 바인딩(dynamic binding)** : 메시지와 메서드를 **실행 시점**에 바인딩
* **초기 바인딩(early binding), 정적 바인딩(static binding)** : **컴파일 시점**에 실행될 함수나 프로시저를 결정하는 것
* 객체지향이 컴파일 시점의 의존성과 실행 시점의 의존성을 분리하고, 하나의 메시지를 선택적으로 서로 다른 메서드에 연결할 수 있는 이유가 바로 지연 바인딩이라는 메커니즘을 사용하기 때문이다.
* 상속을 이용하면 동일한 인터페이스를 공유하는 클래스들을 하나의 타입 계층으로 묶을 수 있다. 이런 이유로 대부분의 사람들은 다형성을 이야기할 때 상속을 함께 언급한다. 그러나 클래스를 상속받는 것만이 다형성을 구현할 수 있는 유일한 방법은 아니다.

#### 인터페이스와 다형성

* 종종 구현은 필요가 없고 순수하게 인터페이스만 공유하고 싶을 때가 있다. 이를 위해 C#과 자바에서는 **인터페이스**라는 프로그래밍 요소를 제공한다.

### 5. 추상화와 유연성

#### 추상화의 힘
